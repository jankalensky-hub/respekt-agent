#!/usr/bin/env python3
"""
Respekt EPUB Downloader v3.0 - Nov√° verze s p≈ô√≠m√Ωmi URL
Automaticky st√°hne aktu√°ln√≠ ƒç√≠slo Respektu a ode≈°le na Kindle
Build: 20250825
"""

import os
import time
import smtplib
import requests
import re
from datetime import datetime, timedelta
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
import logging

# Konfigurace
RESPEKT_LOGIN = os.getenv('RESPEKT_LOGIN')
RESPEKT_PASSWORD = os.getenv('RESPEKT_PASSWORD')
GMAIL_EMAIL = os.getenv('GMAIL_EMAIL')
GMAIL_APP_PASSWORD = os.getenv('GMAIL_APP_PASSWORD')
KINDLE_EMAIL = os.getenv('KINDLE_EMAIL')

# Nastaven√≠ logov√°n√≠
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('respekt.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class RespektDownloader:
    def __init__(self):
        self.driver = None
        self.setup_browser()
    
    def setup_browser(self):
        """Nastav√≠ Chrome pro headless mode s optimalizac√≠ pro GitHub Actions"""
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--disable-extensions')
        chrome_options.add_argument('--disable-plugins')
        chrome_options.add_argument('--disable-images')
        chrome_options.add_argument('--window-size=1920,1080')
        chrome_options.add_argument('--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        
        # Dodateƒçn√© argumenty pro stabilitu
        chrome_options.add_argument('--disable-background-timer-throttling')
        chrome_options.add_argument('--disable-backgrounding-occluded-windows')
        chrome_options.add_argument('--disable-renderer-backgrounding')
        chrome_options.add_argument('--disable-features=TranslateUI')
        chrome_options.add_argument('--disable-ipc-flooding-protection')
        chrome_options.add_argument('--disable-client-side-phishing-detection')
        chrome_options.add_argument('--disable-default-apps')
        chrome_options.add_argument('--disable-hang-monitor')
        chrome_options.add_argument('--disable-popup-blocking')
        chrome_options.add_argument('--disable-prompt-on-repost')
        chrome_options.add_argument('--disable-sync')
        chrome_options.add_argument('--disable-web-security')
        chrome_options.add_argument('--metrics-recording-only')
        chrome_options.add_argument('--no-first-run')
        chrome_options.add_argument('--safebrowsing-disable-auto-update')
        chrome_options.add_argument('--enable-automation')
        chrome_options.add_argument('--password-store=basic')
        chrome_options.add_argument('--use-mock-keychain')
        
        try:
            self.driver = webdriver.Chrome(
                service=Service(ChromeDriverManager().install()),
                options=chrome_options
            )
            self.wait = WebDriverWait(self.driver, 30)
            logger.info("Browser inicializov√°n √∫spƒõ≈°nƒõ")
        except Exception as e:
            logger.error(f"Chyba p≈ôi inicializaci browseru: {e}")
            raise
    
    def save_debug_info(self, name):
        """Ulo≈æ√≠ screenshot a HTML pro debugging"""
        try:
            # Ulo≈æit screenshot
            screenshot_path = f"debug_{name}.png"
            self.driver.save_screenshot(screenshot_path)
            logger.info(f"Screenshot ulo≈æen: {screenshot_path}")
            
            # Ulo≈æit HTML
            html_path = f"debug_{name}.html"
            with open(html_path, 'w', encoding='utf-8') as f:
                f.write(self.driver.page_source)
            logger.info(f"HTML ulo≈æeno: {html_path}")
            
            # Vypsat ƒç√°st HTML do logu
            logger.info("HTML str√°nky (prvn√≠ch 1500 znak≈Ø):")
            logger.info(self.driver.page_source[:1500])
            
        except Exception as e:
            logger.error(f"Chyba p≈ôi ukl√°d√°n√≠ debug info: {e}")
    
    def login(self):
        """P≈ôihl√°≈°en√≠ na Respekt.cz"""
        try:
            logger.info("üîê P≈ôihla≈°uji se na Respekt.cz...")
            
            # Naƒçti hlavn√≠ str√°nku nejd≈ô√≠ve
            self.driver.get("https://www.respekt.cz")
            time.sleep(2)
            logger.info(f"Hlavn√≠ str√°nka naƒçtena, title: {self.driver.title}")
            
            # Teƒè jdi na p≈ôihl√°≈°en√≠  
            self.driver.get("https://www.respekt.cz/uzivatel/prihlaseni")
            time.sleep(3)
            logger.info(f"P≈ôihla≈°ovac√≠ str√°nka naƒçtena, title: {self.driver.title}")
            
            # Zkus naj√≠t formul√°≈ô r≈Øzn√Ωmi zp≈Øsoby
            email_field = None
            selectors_email = ["input[name='email']", "input[type='email']", "#email", ".email"]
            
            for selector in selectors_email:
                try:
                    email_field = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    logger.info(f"Email pole nalezeno pomoc√≠: {selector}")
                    break
                except TimeoutException:
                    logger.info(f"Email pole nenalezeno pomoc√≠: {selector}")
                    continue
            
            if not email_field:
                logger.error("Nena≈°el jsem email pole")
                self.save_debug_info("login_page_no_email")
                return False
            
            # Hledej password pole
            password_field = None
            selectors_password = ["input[name='password']", "input[type='password']", "#password", ".password"]
            
            for selector in selectors_password:
                try:
                    password_field = self.driver.find_element(By.CSS_SELECTOR, selector)
                    logger.info(f"Password pole nalezeno pomoc√≠: {selector}")
                    break
                except NoSuchElementException:
                    continue
            
            if not password_field:
                logger.error("Nena≈°el jsem password pole")
                return False
            
            # Vypl≈à p≈ôihla≈°ovac√≠ √∫daje
            logger.info("Vypl≈àuji p≈ôihla≈°ovac√≠ √∫daje...")
            email_field.clear()
            email_field.send_keys(RESPEKT_LOGIN)
            password_field.clear()
            password_field.send_keys(RESPEKT_PASSWORD)
            
            # Najdi a klikni submit button
            submit_selectors = [
                "button[type='submit']",
                "input[type='submit']", 
                "button:contains('P≈ôihl√°sit')",
                ".submit-button",
                ".login-button"
            ]
            
            submit_button = None
            for selector in submit_selectors:
                try:
                    submit_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    logger.info(f"Submit button nalezen pomoc√≠: {selector}")
                    break
                except NoSuchElementException:
                    continue
            
            if not submit_button:
                # Zkus naj√≠t pomoc√≠ textu
                try:
                    submit_button = self.driver.find_element(By.XPATH, "//button[contains(text(), 'P≈ôihl√°sit') or contains(text(), 'Login')]")
                    logger.info("Submit button nalezen pomoc√≠ XPath")
                except NoSuchElementException:
                    logger.error("Nena≈°el jsem submit button")
                    return False
            
            # Klikni na submit
            logger.info("Odes√≠l√°m p≈ôihla≈°ovac√≠ formul√°≈ô...")
            submit_button.click()
            
            # Poƒçkaj na p≈ôesmƒõrov√°n√≠
            time.sleep(5)
            
            # Zkontroluj p≈ôihl√°≈°en√≠
            current_url = self.driver.current_url
            logger.info(f"Aktu√°ln√≠ URL po p≈ôihl√°≈°en√≠: {current_url}")
            
            # Kontrola r≈Øzn√Ωch indik√°tor≈Ø √∫spƒõ≈°n√©ho p≈ôihl√°≈°en√≠
            login_indicators = [
                "//a[contains(@href, 'muj-ucet') or contains(text(), 'M≈Øj √∫ƒçet')]",
                "//a[contains(@href, 'archiv') or contains(text(), 'Archiv')]",
                "//a[contains(@href, 'odhlaseni') or contains(text(), 'Odhl√°sit')]",
                "//div[contains(@class, 'user') or contains(@class, 'profile')]"
            ]
            
            for indicator in login_indicators:
                try:
                    element = self.driver.find_element(By.XPATH, indicator)
                    logger.info(f"‚úÖ P≈ôihl√°≈°en√≠ potvrzeno - nalezen element: {element.text}")
                    return True
                except NoSuchElementException:
                    continue
            
            # Pokud jsme nebyli p≈ôesmƒõrov√°ni zpƒõt na login, pova≈æujme to za √∫spƒõch
            if "prihlaseni" not in current_url:
                logger.info("‚úÖ P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√© - nejsme na p≈ôihla≈°ovac√≠ str√°nce")
                return True
            
            logger.warning("‚ö†Ô∏è Nelze potvrdit √∫spƒõ≈°n√© p≈ôihl√°≈°en√≠, ale pokraƒçuji...")
            return True
                
        except Exception as e:
            logger.error(f"‚ùå Chyba p≈ôi p≈ôihla≈°ov√°n√≠: {e}")
            try:
                logger.error(f"Aktu√°ln√≠ URL: {self.driver.current_url}")
                logger.error(f"Page title: {self.driver.title}")
            except:
                pass
            return False
    
    def find_current_issue(self):
        """üéØ Najde aktu√°ln√≠ vyd√°n√≠ pomoc√≠ p≈ô√≠m√Ωch URL"""
        try:
            logger.info("üîç Hled√°m aktu√°ln√≠ vyd√°n√≠...")
            logger.info("üöÄ Pou≈æ√≠v√°m novou strategii p≈ô√≠m√Ωch URL!")
            
            # Strategie 1: Zkusit p≈ô√≠mo nejnovƒõj≈°√≠ vyd√°n√≠
            current_year = datetime.now().year
            logger.info(f"üìÖ Aktu√°ln√≠ rok: {current_year}")
            
            # Zaƒçni od ƒç√≠sla 35 (v√≠me, ≈æe existuje) a zkus okoln√≠ ƒç√≠sla
            issue_numbers = [35, 36, 34, 37, 33, 38, 32, 39, 31, 40]
            
            for issue_num in issue_numbers:
                test_url = f"https://www.respekt.cz/tydenik/{current_year}/{issue_num}"
                logger.info(f"üß™ Testuji vyd√°n√≠ {issue_num}/2025: {test_url}")
                
                try:
                    self.driver.get(test_url)
                    time.sleep(3)
                    
                    title = self.driver.title
                    logger.info(f"üìÑ Title str√°nky: {title}")
                    
                    # Zkontroluj validitu str√°nky
                    if "404" not in title and "RESPEKT" in title and title != "RESPEKT":
                        logger.info(f"‚úÖ Nalezeno funkƒçn√≠ vyd√°n√≠ {issue_num}/2025!")
                        logger.info(f"üéâ URL: {test_url}")
                        return test_url
                    else:
                        logger.info(f"‚ùå Vyd√°n√≠ {issue_num}/2025 neexistuje nebo je pr√°zdn√©")
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Chyba p≈ôi testov√°n√≠ vyd√°n√≠ {issue_num}: {e}")
                    continue
            
            logger.error("‚ùå ≈Ω√°dn√© p≈ô√≠m√© URL nevyhovovalo!")
            logger.info("üîÑ Zkou≈°√≠m z√°lo≈æn√≠ metody...")
            
            # Strategie 2: Zkus archiv
            return self._find_issue_from_archive()
            
        except Exception as e:
            logger.error(f"üí• Chyba p≈ôi hled√°n√≠ vyd√°n√≠: {e}")
            self.save_debug_info("find_issue_error")
            return None
    
    def _find_issue_from_archive(self):
        """Z√°lo≈æn√≠ metoda - hled√°n√≠ v archivu"""
        try:
            logger.info("üìö Zkou≈°√≠m archiv jako z√°lo≈æn√≠ mo≈ænost...")
            
            current_year = datetime.now().year
            archive_url = f"https://www.respekt.cz/archiv/{current_year}"
            self.driver.get(archive_url)
            time.sleep(5)
            
            logger.info(f"Archive naƒçten: {self.driver.title}")
            
            # Hledej odkazy na vyd√°n√≠
            selectors = [
                f"//a[contains(@href, '/tydenik/{current_year}/')]",
                "//a[contains(@href, '/tydenik/')]"
            ]
            
            for selector in selectors:
                try:
                    issues = self.driver.find_elements(By.XPATH, selector)
                    if issues:
                        issue_url = issues[0].get_attribute('href')
                        logger.info(f"‚úÖ Nalezeno v archivu: {issue_url}")
                        return issue_url
                except Exception as e:
                    logger.debug(f"Selektor {selector} selhal: {e}")
                    continue
            
            logger.error("‚ùå Ani archiv nefunguje")
            return None
            
        except Exception as e:
            logger.error(f"üí• Chyba v archivu: {e}")
            return None
    
    def download_epub(self, issue_url):
        """üì• St√°hne EPUB z dan√© str√°nky vyd√°n√≠"""
        try:
            logger.info(f"üìñ Otev√≠r√°m str√°nku vyd√°n√≠: {issue_url}")
            self.driver.get(issue_url)
            time.sleep(3)
            
            logger.info(f"üìÑ Str√°nka vyd√°n√≠ naƒçtena, title: {self.driver.title}")
            
            # Hledej EPUB download - v√≠me p≈ôesn√Ω form√°t API
            epub_selectors = [
                "//a[contains(@href, '/api/downloadEPub')]",
                "//button[contains(@onclick, '/api/downloadEPub')]",
                "//button[contains(text(), 'St√°hnout epub')]",
                "//a[contains(text(), 'St√°hnout epub')]",
                "//button[contains(text(), 'EPUB')]",
                "//a[contains(text(), 'EPUB')]",
                "button[onclick*='downloadEPub']",
                "a[href*='/api/downloadEPub']"
            ]
            
            epub_element = None
            found_selector = None
            
            for selector in epub_selectors:
                try:
                    if selector.startswith("//"):
                        elements = self.driver.find_elements(By.XPATH, selector)
                    else:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    if elements:
                        epub_element = elements[0]
                        found_selector = selector
                        logger.info(f"üì• EPUB element nalezen: {selector}")
                        logger.info(f"üìù Text elementu: '{epub_element.text.strip()}'")
                        break
                        
                except Exception as e:
                    logger.debug(f"Selektor {selector} selhal: {e}")
                    continue
            
            if not epub_element:
                logger.error("‚ùå Nena≈°el jsem EPUB odkaz!")
                self.save_debug_info("issue_no_epub_link")
                return None
            
            # Z√≠skej URL pro sta≈æen√≠
            epub_url = epub_element.get_attribute('href')
            
            if not epub_url:
                # Zkus extrahovat z onclick
                onclick_attr = epub_element.get_attribute('onclick')
                if onclick_attr and 'downloadEPub' in onclick_attr:
                    match = re.search(r'/api/downloadEPub\?issueId=([a-f0-9-]+)', onclick_attr)
                    if match:
                        epub_url = f"https://www.respekt.cz/api/downloadEPub?issueId={match.group(1)}"
                        logger.info(f"üìÑ URL extrahovana z onclick: {epub_url}")
                
                if not epub_url:
                    logger.error("‚ùå Nelze z√≠skat EPUB URL")
                    return None
            
            logger.info(f"üéØ EPUB URL nalezena: {epub_url}")
            
            # St√°hni pomoc√≠ autentizovan√© session
            cookies = self.driver.get_cookies()
            session = requests.Session()
            
            for cookie in cookies:
                session.cookies.set(cookie['name'], cookie['value'])
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Referer': issue_url,
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
            }
            
            logger.info(f"‚¨áÔ∏è Stahov√°n√≠ EPUB...")
            response = session.get(epub_url, headers=headers)
            response.raise_for_status()
            
            content_length = len(response.content)
            logger.info(f"üìä Sta≈æeno {content_length} bytes")
            
            if content_length < 1000:
                logger.warning(f"‚ö†Ô∏è Podez≈ôele mal√Ω soubor ({content_length} bytes)")
                logger.info(f"Response: {response.text[:500]}")
            
            # Vytvo≈ô n√°zev souboru
            today = datetime.now().strftime("%Y-%m-%d")
            filename = f"respekt_{today}.epub"
            
            with open(filename, 'wb') as f:
                f.write(response.content)
            
            logger.info(f"‚úÖ EPUB √∫spƒõ≈°nƒõ sta≈æen: {filename} ({content_length} bytes)")
            return filename
            
        except Exception as e:
            logger.error(f"üí• Chyba p≈ôi stahov√°n√≠ EPUB: {e}")
            self.save_debug_info("epub_download_error")
            return None
    
    def send_to_kindle(self, epub_file):
        """üìß Ode≈°le EPUB na Kindle"""
        try:
            logger.info(f"üì§ Odes√≠l√°m {epub_file} na Kindle ({KINDLE_EMAIL})...")
            
            msg = MIMEMultipart()
            msg['From'] = GMAIL_EMAIL
            msg['To'] = KINDLE_EMAIL
            msg['Subject'] = f"Respekt - {datetime.now().strftime('%d.%m.%Y')}"
            
            with open(epub_file, "rb") as attachment:
                part = MIMEBase('application', 'epub+zip')
                part.set_payload(attachment.read())
            
            encoders.encode_base64(part)
            part.add_header('Content-Disposition', f'attachment; filename="{epub_file}"')
            msg.attach(part)
            
            with smtplib.SMTP('smtp.gmail.com', 587) as server:
                server.starttls()
                server.login(GMAIL_EMAIL, GMAIL_APP_PASSWORD)
                server.send_message(msg)
            
            logger.info("‚úÖ Email √∫spƒõ≈°nƒõ odesl√°n na Kindle!")
            return True
            
        except Exception as e:
            logger.error(f"üí• Chyba p≈ôi odes√≠l√°n√≠ emailu: {e}")
            return False
    
    def run(self):
        """üöÄ Hlavn√≠ metoda - spust√≠ cel√Ω proces"""
        try:
            logger.info("üé¨ === Spou≈°t√≠m Respekt EPUB Downloader v3.0 - NOV√Å VERZE ===")
            logger.info("üì¶ Verze: P≈ô√≠m√© URL strategie s backup syst√©mem (build 20250825)")
            logger.info("üöÄ Nov√Ω algoritmus pro hled√°n√≠ vyd√°n√≠ aktivn√≠!")
            
            # Kontrola promƒõnn√Ωch prost≈ôed√≠
            required_vars = ['RESPEKT_LOGIN', 'RESPEKT_PASSWORD', 'GMAIL_EMAIL', 'GMAIL_APP_PASSWORD', 'KINDLE_EMAIL']
            missing_vars = [var for var in required_vars if not os.getenv(var)]
            
            if missing_vars:
                logger.error(f"‚ùå Chyb√≠ promƒõnn√© prost≈ôed√≠: {', '.join(missing_vars)}")
                return False
            
            logger.info("‚úÖ V≈°echny promƒõnn√© prost≈ôed√≠ jsou nastaven√©")
            
            # 1. P≈ôihl√°≈°en√≠
            if not self.login():
                return False
            
            # 2. Najdi aktu√°ln√≠ vyd√°n√≠
            issue_url = self.find_current_issue()
            if not issue_url:
                return False
            
            # 3. St√°hni EPUB
            epub_file = self.download_epub(issue_url)
            if not epub_file:
                return False
            
            # 4. Ode≈°li na Kindle
            success = self.send_to_kindle(epub_file)
            
            if success:
                logger.info("üéâ === Proces √∫spƒõ≈°nƒõ dokonƒçen! ===")
                try:
                    os.remove(epub_file)
                    logger.info(f"üóëÔ∏è M√≠stn√≠ soubor {epub_file} smaz√°n")
                except:
                    pass
            
            return success
            
        except Exception as e:
            logger.error(f"üí• Neoƒçek√°van√° chyba: {e}")
            return False
        
        finally:
            if self.driver:
                self.driver.quit()

def main():
    """Hlavn√≠ funkce"""
    logger.info("üåü Respekt EPUB Downloader v3.0 - Starting...")
    
    downloader = RespektDownloader()
    success = downloader.run()
    
    if not success:
        logger.error("‚ùå Proces selhal!")
        exit(1)
    
    logger.info("‚úÖ Hotovo!")

if __name__ == "__main__":
    main()
